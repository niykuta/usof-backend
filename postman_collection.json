{
	"info": {
		"_postman_id": "usof-backend-collection",
		"name": "USOF Backend API Tests",
		"description": "Comprehensive Postman collection for testing USOF backend API according to all requirements",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000/api",
			"type": "string"
		},
		{
			"key": "accessToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "adminToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "refreshToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "",
			"type": "string"
		},
		{
			"key": "adminId",
			"value": "1",
			"type": "string"
		},
		{
			"key": "postId",
			"value": "",
			"type": "string"
		},
		{
			"key": "commentId",
			"value": "",
			"type": "string"
		},
		{
			"key": "categoryId",
			"value": "",
			"type": "string"
		},
		{
			"key": "newUserId",
			"value": "",
			"type": "string"
		},
		{
			"key": "multiCategoryPostId",
			"value": "",
			"type": "string"
		},
		{
			"key": "unreadNotificationId",
			"value": "1",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "01. Server Health Check",
			"item": [
				{
					"name": "Check Server Running",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Server is running', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								""
							]
						},
						"description": "Verify the server is running without errors"
					},
					"response": []
				}
			]
		},
		{
			"name": "02. Authentication",
			"item": [
				{
					"name": "Register New User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User registration successful', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response contains user data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData.user).to.have.property('id');",
									"    pm.expect(jsonData.user).to.have.property('login');",
									"    pm.expect(jsonData.user).to.have.property('email');",
									"    pm.collectionVariables.set('userId', jsonData.user.id);",
									"});",
									"",
									"pm.test('User created in database', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.user.login).to.eql('test_user');",
									"    pm.expect(jsonData.user.email).to.eql('test@example.com');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "login",
									"value": "test_user",
									"type": "text"
								},
								{
									"key": "email",
									"value": "test@example.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "TestPassword123!",
									"type": "text"
								},
								{
									"key": "full_name",
									"value": "Test User",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Regular User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Login successful', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains tokens', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('accessToken');",
									"    pm.expect(jsonData).to.have.property('refreshToken');",
									"    pm.collectionVariables.set('accessToken', jsonData.accessToken);",
									"    pm.collectionVariables.set('refreshToken', jsonData.refreshToken);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "login",
									"value": "johndoe",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Admin User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Admin login successful', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains admin token', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('accessToken');",
									"    pm.collectionVariables.set('adminToken', jsonData.accessToken);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "login",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Token refresh successful', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('New access token received', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('accessToken');",
									"    pm.expect(jsonData).to.have.property('refreshToken');",
									"    pm.collectionVariables.set('accessToken', jsonData.accessToken);",
									"    pm.collectionVariables.set('refreshToken', jsonData.refreshToken);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/refresh",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request Password Reset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Password reset request accepted', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "john@usof.dev",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/auth/password-reset",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"password-reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Logout successful', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "03. Users Management",
			"item": [
				{
					"name": "Get All Users (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Admin can get all users', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains users array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    pm.expect(jsonData.length).to.be.at.least(5);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('accessToken', pm.collectionVariables.get('adminToken'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Specific User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User details retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains user data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('login');",
									"    pm.expect(jsonData).to.have.property('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Password update successful', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Re-login as johndoe to ensure we have the correct token",
									"pm.sendRequest({",
									"    url: pm.collectionVariables.get('baseUrl') + '/auth/login',",
									"    method: 'POST',",
									"    header: { 'Content-Type': 'application/x-www-form-urlencoded' },",
									"    body: {",
									"        mode: 'urlencoded',",
									"        urlencoded: [",
									"            { key: 'login', value: 'johndoe' },",
									"            { key: 'password', value: 'password123' }",
									"        ]",
									"    }",
									"}, function (err, res) {",
									"    if (!err && res.code === 200) {",
									"        const jsonData = res.json();",
									"        pm.collectionVariables.set('accessToken', jsonData.accessToken);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "old_password",
									"value": "password123",
									"type": "text"
								},
								{
									"key": "new_password",
									"value": "newpassword123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/users/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with Old Password (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Old password is invalid', function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "login",
									"value": "johndoe",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with New Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Login with new password successful', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('New password works', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('accessToken');",
									"    pm.collectionVariables.set('accessToken', jsonData.accessToken);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "login",
									"value": "johndoe",
									"type": "text"
								},
								{
									"key": "password",
									"value": "newpassword123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Admin can create user', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('User created successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData.user).to.have.property('id');",
									"    pm.collectionVariables.set('newUserId', jsonData.user.id);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('accessToken', pm.collectionVariables.get('adminToken'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "login",
									"value": "admin_created_user",
									"type": "text"
								},
								{
									"key": "email",
									"value": "admincreated@example.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Password123!",
									"type": "text"
								},
								{
									"key": "full_name",
									"value": "Admin Created User",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Admin can delete user', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('accessToken', pm.collectionVariables.get('adminToken'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/{{newUserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{newUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Favorites",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User favorites retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains favorites array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('favorites');",
									"    pm.expect(jsonData.favorites).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/2/favorites",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2",
								"favorites"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Subscriptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User subscriptions retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains subscriptions array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('subscriptions');",
									"    pm.expect(jsonData.subscriptions).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/2/subscriptions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2",
								"subscriptions"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "04. Posts Management",
			"item": [
				{
					"name": "Get All Posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Posts list retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains posts', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    pm.expect(jsonData.length).to.be.at.least(5);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/posts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Specific Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Post information retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Post has all required fields', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData).to.have.property('content');",
									"    pm.expect(jsonData).to.have.property('user_id');",
									"    pm.expect(jsonData).to.have.property('status');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/posts/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Post with One Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Post created successfully', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Post has category assigned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('post');",
									"    pm.expect(jsonData.post).to.have.property('id');",
									"    pm.collectionVariables.set('postId', jsonData.post.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Test Post with Category\",\n  \"content\": \"This is a test post to verify category assignment works.\",\n  \"categories\": [1]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/posts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Post with Multiple Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Post with multiple categories created', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Multiple categories can be assigned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('post');",
									"    pm.expect(jsonData.post).to.have.property('id');",
									"    pm.collectionVariables.set('multiCategoryPostId', jsonData.post.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Multi-Category Test Post\",\n  \"content\": \"This post belongs to multiple categories.\",\n  \"categories\": [1, 2, 3]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/posts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Post categories retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Categories array returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('categories');",
									"    pm.expect(jsonData.categories).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/posts/{{multiCategoryPostId}}/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"{{multiCategoryPostId}}",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Post Content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Content editing successful', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('User can edit own post', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData).to.have.property('post');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "content",
									"value": "Updated content for testing PATCH request",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/posts/{{postId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"{{postId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Make Post Inactive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status change successful', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('User can make post inactive', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData).to.have.property('post');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "status",
									"value": "inactive",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/posts/{{postId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"{{postId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post Comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Comments retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Comments array returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/posts/1/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"1",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Comment to Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Comment created', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Comment has required fields', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('comment');",
									"    pm.expect(jsonData.comment).to.have.property('id');",
									"    pm.collectionVariables.set('commentId', jsonData.comment.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "content",
									"value": "This is a test comment for the post.",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/posts/1/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"1",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Like a Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Like added successfully', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Rating increases after like', function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "type",
									"value": "like",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/posts/3/like",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"3",
								"like"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post Rating After Like",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Rating check successful', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Rating increased', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('rating');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/posts/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Try to Like Same Post Again (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Cannot like post twice', function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test('Only one like per post enforced', function () {",
									"    pm.response.to.have.status(409);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "type",
									"value": "like",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/posts/3/like",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"3",
								"like"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Like from Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Like removed successfully', function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts/3/like",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"3",
								"like"
							]
						}
					},
					"response": []
				},
				{
					"name": "Dislike a Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Dislike added successfully', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Rating decreases after dislike', function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "type",
									"value": "dislike",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/posts/3/like",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"3",
								"like"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post Rating After Dislike",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Rating check successful', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Rating decreased', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('rating');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/posts/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Post to Favorites",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Post added to favorites', function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts/3/favorite",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"3",
								"favorite"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Post from Favorites",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Post removed from favorites', function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts/3/favorite",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"3",
								"favorite"
							]
						}
					},
					"response": []
				},
				{
					"name": "Subscribe to Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Subscribed to post', function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts/3/subscribe",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"3",
								"subscribe"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unsubscribe from Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Unsubscribed from post', function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts/3/subscribe",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"3",
								"subscribe"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Post deleted successfully', function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts/{{postId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"{{postId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "05. Comments Management",
			"item": [
				{
					"name": "Get Specific Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Comment retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Comment has all fields', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('content');",
									"    pm.expect(jsonData).to.have.property('user_id');",
									"    pm.expect(jsonData).to.have.property('post_id');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/comments/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Comment updated successfully', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "content",
									"value": "Updated comment content via PATCH",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/comments/{{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Like a Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Comment liked successfully', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Rating increases after like', function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "type",
									"value": "like",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/comments/1/like",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"1",
								"like"
							]
						}
					},
					"response": []
				},
				{
					"name": "Try to Like Same Comment Again (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('One like per comment enforced', function () {",
									"    pm.response.to.have.status(409);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "type",
									"value": "like",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/comments/1/like",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"1",
								"like"
							]
						}
					},
					"response": []
				},
				{
					"name": "Dislike a Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Comment disliked successfully', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Rating decreases after dislike', function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// First remove the existing like",
									"pm.sendRequest({",
									"    url: pm.collectionVariables.get('baseUrl') + '/comments/1/like',",
									"    method: 'DELETE',",
									"    header: {",
									"        'Authorization': 'Bearer ' + pm.collectionVariables.get('accessToken')",
									"    }",
									"}, function (err, res) {",
									"    console.log('Removed existing like');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "type",
									"value": "dislike",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/comments/1/like",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"1",
								"like"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Comment Likes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Comment likes retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Likes array returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/comments/1/like",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"1",
								"like"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Comment deleted successfully', function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/comments/{{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "06. Categories Management",
			"item": [
				{
					"name": "Get All Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Categories retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains at least 5 categories', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    pm.expect(jsonData.length).to.be.at.least(5);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Specific Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Category retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Category has required fields', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('title');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/categories/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Posts for Specific Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Category posts retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Posts array returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/categories/1/posts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories",
								"1",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Category (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Admin can create category', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Category created successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.collectionVariables.set('categoryId', jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('accessToken', pm.collectionVariables.get('adminToken'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "title",
									"value": "Test Category",
									"type": "text"
								},
								{
									"key": "description",
									"value": "This is a test category created by admin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Category Name (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Admin can update category', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('accessToken', pm.collectionVariables.get('adminToken'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "title",
									"value": "Updated Test Category",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/categories/{{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories",
								"{{categoryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Category (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Admin can delete category', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('accessToken', pm.collectionVariables.get('adminToken'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/categories/{{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories",
								"{{categoryId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "07. Admin Operations",
			"item": [
				{
					"name": "Get Dashboard Stats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Admin can access dashboard', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Dashboard stats returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('object');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('accessToken', pm.collectionVariables.get('adminToken'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/stats",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"stats"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin Make Post Inactive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Admin can make post inactive', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('accessToken', pm.collectionVariables.get('adminToken'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "status",
									"value": "inactive",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/posts/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "08. Notifications",
			"item": [
				{
					"name": "Get User Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Notifications retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains notifications', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('notifications');",
									"    pm.expect(jsonData.notifications).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/notifications/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notifications",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Unread Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Unread notifications retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains unread notifications', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('unread_notifications');",
									"    pm.expect(jsonData.unread_notifications).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/notifications/2/unread",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notifications",
								"2",
								"unread"
							]
						}
					},
					"response": []
				},
				{
					"name": "Mark Notification as Read",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Notification marked as read', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Ensure we're logged in as johndoe (user_id = 2)",
									"pm.sendRequest({",
									"    url: pm.collectionVariables.get('baseUrl') + '/auth/login',",
									"    method: 'POST',",
									"    header: { 'Content-Type': 'application/x-www-form-urlencoded' },",
									"    body: {",
									"        mode: 'urlencoded',",
									"        urlencoded: [",
									"            { key: 'login', value: 'johndoe' },",
									"            { key: 'password', value: 'newpassword123' }",
									"        ]",
									"    }",
									"}, function (err, res) {",
									"    if (!err && res.code === 200) {",
									"        const jsonData = res.json();",
									"        pm.collectionVariables.set('accessToken', jsonData.accessToken);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/notifications/{{unreadNotificationId}}/read",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notifications",
								"{{unreadNotificationId}}",
								"read"
							]
						}
					},
					"response": []
				},
				{
					"name": "Mark All Notifications as Read",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('All notifications marked as read', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/notifications/read-all",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notifications",
								"read-all"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}