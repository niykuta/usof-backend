INSERT IGNORE INTO users (login, password, full_name, email, email_verified, profile_picture, rating, role) VALUES
('admin', '$2b$12$AZFuaIQKlGlmOL0/WfaV1uV24Bp4FPNiGefJMcPGrxDlZ0ffFbSeW', 'Administrator', 'admin@usof.com', TRUE, NULL, 0, 'admin'),
('john_smith', '$2b$12$lCLTgYvGmf7g0IGd.FaBtOqS8r2gspnOMSo91I7fsNJi2RLEvKQU.', 'John Smith', 'john@usof.com', TRUE, NULL, 0, 'user'),
('alice_wonder', '$2b$12$lCLTgYvGmf7g0IGd.FaBtOqS8r2gspnOMSo91I7fsNJi2RLEvKQU.', 'Alice Wonder', 'alice@usof.com', TRUE, NULL, 0, 'user'),
('bob_builder', '$2b$12$lCLTgYvGmf7g0IGd.FaBtOqS8r2gspnOMSo91I7fsNJi2RLEvKQU.', 'Bob Builder', 'bob@usof.com', TRUE, NULL, 0, 'user'),
('sarah_connor', '$2b$12$lCLTgYvGmf7g0IGd.FaBtOqS8r2gspnOMSo91I7fsNJi2RLEvKQU.', 'Sarah Connor', 'sarah@usof.com', TRUE, NULL, 0, 'user'),
('mike_ross', '$2b$12$lCLTgYvGmf7g0IGd.FaBtOqS8r2gspnOMSo91I7fsNJi2RLEvKQU.', 'Mike Ross', 'mike@usof.com', TRUE, NULL, 0, 'user'),
('emma_watson', '$2b$12$lCLTgYvGmf7g0IGd.FaBtOqS8r2gspnOMSo91I7fsNJi2RLEvKQU.', 'Emma Watson', 'emma@usof.com', TRUE, NULL, 0, 'user'),
('david_garcia', '$2b$12$lCLTgYvGmf7g0IGd.FaBtOqS8r2gspnOMSo91I7fsNJi2RLEvKQU.', 'David Garcia', 'david@usof.com', TRUE, NULL, 0, 'user'),
('lisa_simpson', '$2b$12$lCLTgYvGmf7g0IGd.FaBtOqS8r2gspnOMSo91I7fsNJi2RLEvKQU.', 'Lisa Simpson', 'lisa@usof.com', TRUE, NULL, 0, 'user'),
('tom_hardy', '$2b$12$lCLTgYvGmf7g0IGd.FaBtOqS8r2gspnOMSo91I7fsNJi2RLEvKQU.', 'Tom Hardy', 'tom@usof.com', TRUE, NULL, 0, 'user'),
('nina_dobrev', '$2b$12$lCLTgYvGmf7g0IGd.FaBtOqS8r2gspnOMSo91I7fsNJi2RLEvKQU.', 'Nina Dobrev', 'nina@usof.com', TRUE, NULL, 0, 'user'),
('chris_evans', '$2b$12$lCLTgYvGmf7g0IGd.FaBtOqS8r2gspnOMSo91I7fsNJi2RLEvKQU.', 'Chris Evans', 'chris@usof.com', TRUE, NULL, 0, 'user'),
('kate_hudson', '$2b$12$lCLTgYvGmf7g0IGd.FaBtOqS8r2gspnOMSo91I7fsNJi2RLEvKQU.', 'Kate Hudson', 'kate@usof.com', TRUE, NULL, 0, 'user'),
('ryan_gosling', '$2b$12$lCLTgYvGmf7g0IGd.FaBtOqS8r2gspnOMSo91I7fsNJi2RLEvKQU.', 'Ryan Gosling', 'ryan@usof.com', TRUE, NULL, 0, 'user'),
('jennifer_law', '$2b$12$lCLTgYvGmf7g0IGd.FaBtOqS8r2gspnOMSo91I7fsNJi2RLEvKQU.', 'Jennifer Lawrence', 'jennifer@usof.com', TRUE, NULL, 0, 'user'),
('daniel_craig', '$2b$12$lCLTgYvGmf7g0IGd.FaBtOqS8r2gspnOMSo91I7fsNJi2RLEvKQU.', 'Daniel Craig', 'daniel@usof.com', TRUE, NULL, 0, 'user'),
('olivia_wilde', '$2b$12$lCLTgYvGmf7g0IGd.FaBtOqS8r2gspnOMSo91I7fsNJi2RLEvKQU.', 'Olivia Wilde', 'olivia@usof.com', TRUE, NULL, 0, 'user'),
('leo_dicaprio', '$2b$12$lCLTgYvGmf7g0IGd.FaBtOqS8r2gspnOMSo91I7fsNJi2RLEvKQU.', 'Leonardo DiCaprio', 'leo@usof.com', TRUE, NULL, 0, 'user'),
('natalie_port', '$2b$12$lCLTgYvGmf7g0IGd.FaBtOqS8r2gspnOMSo91I7fsNJi2RLEvKQU.', 'Natalie Portman', 'natalie@usof.com', TRUE, NULL, 0, 'user'),
('brad_pitt', '$2b$12$lCLTgYvGmf7g0IGd.FaBtOqS8r2gspnOMSo91I7fsNJi2RLEvKQU.', 'Brad Pitt', 'brad@usof.com', TRUE, NULL, 0, 'user'),
('scarlett_jo', '$2b$12$lCLTgYvGmf7g0IGd.FaBtOqS8r2gspnOMSo91I7fsNJi2RLEvKQU.', 'Scarlett Johansson', 'scarlett@usof.com', TRUE, NULL, 0, 'user'),
('matt_damon', '$2b$12$lCLTgYvGmf7g0IGd.FaBtOqS8r2gspnOMSo91I7fsNJi2RLEvKQU.', 'Matt Damon', 'matt@usof.com', TRUE, NULL, 0, 'user'),
('mila_kunis', '$2b$12$lCLTgYvGmf7g0IGd.FaBtOqS8r2gspnOMSo91I7fsNJi2RLEvKQU.', 'Mila Kunis', 'mila@usof.com', TRUE, NULL, 0, 'user'),
('will_smith', '$2b$12$lCLTgYvGmf7g0IGd.FaBtOqS8r2gspnOMSo91I7fsNJi2RLEvKQU.', 'Will Smith', 'will@usof.com', TRUE, NULL, 0, 'user'),
('anne_hathaway', '$2b$12$lCLTgYvGmf7g0IGd.FaBtOqS8r2gspnOMSo91I7fsNJi2RLEvKQU.', 'Anne Hathaway', 'anne@usof.com', TRUE, NULL, 0, 'user');

INSERT IGNORE INTO categories (title, description) VALUES
('JavaScript', 'Questions and discussions about JavaScript programming language, ES6+, and modern features'),
('TypeScript', 'TypeScript language, type definitions, and best practices'),
('React', 'React library for building user interfaces, hooks, components, and state management'),
('Vue.js', 'Vue.js framework, composition API, and ecosystem'),
('Angular', 'Angular framework, RxJS, and TypeScript integration'),
('Node.js', 'Server-side JavaScript runtime environment, npm, and backend development'),
('Express', 'Fast, minimalist web framework for Node.js'),
('NestJS', 'Progressive Node.js framework for building efficient server-side applications'),
('Database', 'Database design, queries, optimization, and management'),
('MySQL', 'MySQL database, queries, and performance tuning'),
('PostgreSQL', 'PostgreSQL database and advanced features'),
('MongoDB', 'NoSQL database, document-oriented storage'),
('CSS', 'Cascading Style Sheets, animations, and modern CSS features'),
('Tailwind', 'Tailwind CSS utility-first framework'),
('Sass/SCSS', 'CSS preprocessors and advanced styling'),
('HTML', 'HyperText Markup Language, semantic HTML, and accessibility'),
('API', 'REST APIs, GraphQL, and web services'),
('GraphQL', 'GraphQL query language and implementation'),
('Docker', 'Containerization, Docker Compose, and deployment'),
('Kubernetes', 'Container orchestration and cloud deployment'),
('AWS', 'Amazon Web Services and cloud infrastructure'),
('Git', 'Version control, branching strategies, and collaboration'),
('Testing', 'Unit testing, integration testing, and test-driven development'),
('Performance', 'Web performance optimization and best practices'),
('Security', 'Web security, authentication, and authorization'),
('DevOps', 'CI/CD, automation, and infrastructure as code'),
('Python', 'Python programming language and frameworks'),
('Django', 'Django web framework for Python'),
('Flask', 'Flask micro web framework'),
('Machine Learning', 'ML algorithms, neural networks, and AI');

INSERT IGNORE INTO posts (user_id, title, content, status, views) VALUES
(2, 'How to handle async/await in JavaScript?', 'I am struggling with understanding the difference between promises and async/await. Can someone explain when to use each one? I have tried reading the documentation but I need some practical examples.', 'active', 234),
(3, 'Best practices for React hooks', 'What are the most important rules to follow when using React hooks? I keep running into issues with useEffect dependencies.', 'active', 189),
(4, 'TypeScript vs JavaScript: Is it worth it?', 'I have been developing in JavaScript for years. Should I switch to TypeScript? What are the main benefits and drawbacks?', 'active', 421),
(5, 'Node.js error handling best practices', 'What are the recommended patterns for handling errors in Node.js applications? Should I use try-catch everywhere or centralized error handling?', 'active', 312),
(6, 'How to optimize MySQL queries?', 'My application is getting slow due to database queries. What are the best practices for optimization?', 'active', 267),
(7, 'CSS Grid vs Flexbox: When to use which?', 'I am confused about when to use CSS Grid and when to use Flexbox. Can someone explain the differences?', 'active', 498),
(8, 'RESTful API design principles', 'What are the key principles to follow when designing REST APIs? How should I structure my endpoints and handle versioning?', 'active', 356),
(9, 'Understanding closures in JavaScript', 'Can someone provide a simple explanation of closures with practical examples?', 'active', 178),
(10, 'React state management: Context API vs Redux', 'For a medium-sized application, should I use Context API or Redux? What are the performance implications?', 'active', 543),
(11, 'Docker containerization basics', 'I am new to Docker. Can someone explain the basics of containerization and how to get started?', 'active', 289),
(12, 'GraphQL vs REST: Which one to choose?', 'What are the pros and cons of GraphQL compared to traditional REST APIs?', 'active', 401),
(13, 'MongoDB indexing strategies', 'How should I create indexes in MongoDB for optimal performance?', 'active', 223),
(14, 'Vue 3 Composition API explained', 'The new Composition API in Vue 3 seems complicated. Can someone break it down?', 'active', 334),
(15, 'JWT authentication implementation in Express', 'What is the best way to implement JWT authentication in an Express application?', 'active', 467),
(16, 'Tailwind CSS vs traditional CSS', 'Is Tailwind CSS worth learning or should I stick with traditional CSS?', 'active', 512),
(17, 'PostgreSQL vs MySQL: Which to choose?', 'Starting a new project. Should I use PostgreSQL or MySQL?', 'active', 378),
(18, 'Webpack configuration for React', 'How do I properly configure Webpack for a React project in 2024?', 'active', 201),
(19, 'NestJS vs Express: Framework comparison', 'Should I use NestJS for my new Node.js project or stick with Express?', 'active', 445),
(20, 'Web performance optimization techniques', 'What are the most effective ways to improve website loading speed?', 'active', 623),
(2, 'Git branching strategies for teams', 'What Git workflow do you recommend for a team of 10 developers?', 'active', 298),
(3, 'Testing React components with Jest', 'How do I write effective unit tests for React components?', 'active', 267),
(4, 'AWS Lambda best practices', 'What are the best practices for building serverless applications with AWS Lambda?', 'active', 389),
(5, 'Python async/await explained', 'How does async/await work in Python compared to JavaScript?', 'active', 256),
(6, 'Django ORM vs raw SQL queries', 'When should I use Django ORM and when should I write raw SQL?', 'active', 234),
(7, 'Kubernetes deployment strategies', 'What are the different deployment strategies in Kubernetes?', 'active', 412),
(8, 'React performance optimization', 'My React app is slow. What optimization techniques should I apply?', 'active', 534),
(9, 'SASS vs LESS: CSS preprocessor comparison', 'Which CSS preprocessor should I choose for my project?', 'active', 178),
(10, 'Machine Learning with Python basics', 'Complete beginner to ML. Where should I start?', 'active', 612),
(11, 'WebSocket implementation in Node.js', 'How do I implement real-time communication with WebSockets?', 'active', 345),
(12, 'Angular vs React in 2024', 'Which framework should I learn as a beginner?', 'active', 678),
(13, 'Flask REST API tutorial', 'How do I build a REST API with Flask?', 'active', 289),
(14, 'DevOps best practices for startups', 'What DevOps practices should a startup implement from day one?', 'active', 401),
(15, 'Security vulnerabilities in web apps', 'What are the most common security issues I should protect against?', 'active', 523),
(16, 'How to learn algorithms effectively?', 'I struggle with algorithmic thinking. Any tips for improvement?', 'active', 445),
(17, 'Microservices architecture patterns', 'What are the common patterns for building microservices?', 'active', 567),
(18, 'React Native vs Flutter', 'Which framework is better for mobile app development?', 'active', 698),
(19, 'SQL injection prevention', 'How do I protect my application from SQL injection attacks?', 'active', 312),
(20, 'Continuous Integration setup guide', 'How do I set up CI/CD pipeline for my project?', 'active', 423),
(21, 'TypeScript generics explained', 'Generics in TypeScript are confusing. Can someone explain with examples?', 'active', 289),
(22, 'React Server Components overview', 'What are React Server Components and should I use them?', 'active', 501),
(23, 'How to debug memory leaks in Node.js?', 'My Node.js application memory usage keeps growing. What tools can I use to find memory leaks?', 'active', 334),
(24, 'Understanding JavaScript event loop', 'Can someone explain how the event loop works with call stack and callback queue?', 'active', 567),
(25, 'Best VSCode extensions for web development', 'What are your must-have VSCode extensions for productivity?', 'active', 723),
(2, 'Redux Toolkit vs traditional Redux', 'Is Redux Toolkit worth migrating to from traditional Redux setup?', 'active', 289),
(3, 'Handling file uploads in Express', 'What is the best library for handling multipart file uploads in Express?', 'active', 412),
(4, 'CSS animations vs JavaScript animations', 'When should I use CSS animations and when JavaScript?', 'active', 345),
(5, 'MongoDB vs PostgreSQL for new project', 'Starting a social media app. Which database should I choose?', 'active', 478),
(6, 'React Query vs SWR comparison', 'Which data fetching library do you recommend?', 'active', 534),
(7, 'How to handle CORS issues?', 'Getting CORS errors when calling my API from frontend. How to fix?', 'active', 298),
(8, 'Next.js App Router vs Pages Router', 'Should I migrate my Next.js project to the new App Router?', 'active', 612),
(9, 'Docker Compose networking basics', 'How do I connect multiple containers in Docker Compose?', 'active', 267),
(10, 'Vim vs VSCode for coding', 'Is it worth learning Vim or should I stick with VSCode?', 'active', 789),
(11, 'OAuth2 implementation guide', 'How do I implement OAuth2 authentication with Google and GitHub?', 'active', 445),
(12, 'PostgreSQL full-text search', 'How to implement efficient full-text search in PostgreSQL?', 'active', 378),
(13, 'React useReducer vs useState', 'When should I use useReducer instead of useState?', 'active', 456),
(14, 'Nginx reverse proxy configuration', 'How do I configure Nginx as a reverse proxy for Node.js app?', 'active', 389),
(15, 'Understanding Promises and microtasks', 'What is the difference between microtasks and macrotasks in JavaScript?', 'active', 512),
(16, 'Monorepo with npm workspaces', 'How to set up a monorepo using npm workspaces?', 'active', 334),
(17, 'Socket.io vs native WebSockets', 'Should I use Socket.io or implement WebSockets from scratch?', 'active', 423),
(18, 'CSS-in-JS vs CSS Modules', 'What are the pros and cons of CSS-in-JS libraries like styled-components?', 'active', 501);

INSERT IGNORE INTO post_categories (post_id, category_id) VALUES
(1, 1), (1, 6),
(2, 3), (2, 1),
(3, 2), (3, 1),
(4, 6), (4, 7),
(5, 9), (5, 10),
(6, 13), (6, 14),
(7, 17),
(8, 1),
(9, 3), (9, 1),
(10, 19),
(11, 17), (11, 18),
(12, 9), (12, 12),
(13, 4),
(14, 6), (14, 7), (14, 25),
(15, 13), (15, 14),
(16, 9), (16, 10),
(17, 1), (17, 6),
(18, 8),
(19, 24),
(20, 22),
(21, 23), (21, 3),
(22, 20), (22, 21),
(23, 27), (23, 1),
(24, 28),
(25, 26), (25, 19),
(26, 3), (26, 24),
(27, 15),
(28, 30),
(29, 6), (29, 1),
(30, 3), (30, 5),
(31, 29),
(32, 26),
(33, 25), (33, 24),
(34, 1), (34, 23),
(35, 1), (35, 6),
(36, 3), (36, 4),
(37, 10), (37, 25),
(38, 26), (38, 19),
(39, 2), (39, 1),
(40, 3),
(41, 6), (41, 24),
(42, 1),
(43, 1),
(44, 3), (44, 1),
(45, 3),
(46, 6), (46, 7),
(47, 13),
(48, 9), (48, 11),
(49, 3),
(50, 7),
(51, 3),
(52, 19),
(53, 10),
(54, 3), (54, 1),
(55, 25),
(56, 6), (56, 1),
(57, 19),
(58, 6), (58, 1),
(59, 13);

INSERT IGNORE INTO comments (post_id, user_id, parent_comment_id, content, status) VALUES
(1, 3, NULL, 'Promises are great but async/await makes your code much more readable. Use async/await for sequential operations and Promise.all() for parallel ones.', 'active'),
(1, 5, NULL, 'Don''t forget about error handling! Always wrap your await calls in try-catch blocks.', 'active'),
(1, 2, 1, 'Thanks! That really helped clarify things.', 'active'),
(1, 7, 1, 'Great explanation! I would also recommend reading the MDN documentation on async functions.', 'active'),
(2, 6, NULL, 'The rules of hooks are crucial: only call them at the top level and only from React functions.', 'active'),
(2, 4, NULL, 'UseEffect cleanup functions are important to prevent memory leaks!', 'active'),
(2, 8, 5, 'Can you provide an example of cleanup functions?', 'active'),
(2, 6, 7, 'Sure! Return a function from useEffect that removes event listeners or cancels subscriptions.', 'active'),
(3, 9, NULL, 'TypeScript is absolutely worth it for larger projects. The type safety catches so many bugs early.', 'active'),
(3, 11, NULL, 'The learning curve is steep but the benefits are massive. Start with strict mode disabled.', 'active'),
(3, 2, 9, 'Do you use TypeScript with React?', 'active'),
(3, 9, 11, 'Yes! React with TypeScript is an excellent combination.', 'active'),
(4, 10, NULL, 'Use centralized error handling middleware in Express. Don''t repeat try-catch everywhere.', 'active'),
(4, 12, NULL, 'Also handle unhandled promise rejections at the process level.', 'active'),
(5, 13, NULL, 'Create indexes on columns used in WHERE clauses and JOIN conditions.', 'active'),
(5, 14, 15, 'But be careful not to over-index as it slows down INSERT and UPDATE operations.', 'active'),
(6, 15, NULL, 'Use Flexbox for one-dimensional layouts (rows or columns). Use Grid for two-dimensional layouts.', 'active'),
(6, 3, NULL, 'Grid is more powerful but Flexbox is simpler for basic layouts.', 'active'),
(7, 16, NULL, 'Follow REST conventions: use proper HTTP verbs (GET, POST, PUT, DELETE) and meaningful URLs.', 'active'),
(7, 17, NULL, 'Versioning is important! Use URL versioning like /api/v1/ or header versioning.', 'active'),
(8, 18, NULL, 'A closure is when a function remembers variables from its outer scope even after that scope has closed.', 'active'),
(8, 19, 21, 'Perfect explanation! Closures are fundamental to JavaScript.', 'active'),
(9, 20, NULL, 'For medium apps, Context API is usually enough. Redux adds complexity you might not need.', 'active'),
(9, 2, NULL, 'But Redux DevTools are amazing for debugging complex state.', 'active'),
(10, 21, NULL, 'Docker lets you package your app with all dependencies into a container that runs anywhere.', 'active'),
(10, 22, NULL, 'Start with a Dockerfile, then learn docker-compose for multi-container apps.', 'active'),
(11, 23, NULL, 'GraphQL gives you exactly the data you need. No over-fetching or under-fetching.', 'active'),
(11, 24, NULL, 'But REST is simpler and has better caching. Choose based on your use case.', 'active'),
(12, 25, NULL, 'Index fields that you query frequently. Use compound indexes for multiple field queries.', 'active'),
(13, 4, NULL, 'Composition API is more flexible and better for code reuse than Options API.', 'active'),
(14, 5, NULL, 'Use access tokens with short expiration and refresh tokens for long sessions.', 'active'),
(14, 6, 30, 'Don''t store sensitive data in JWT payload - it''s not encrypted!', 'active'),
(15, 7, NULL, 'Tailwind speeds up development once you learn the utility classes.', 'active'),
(16, 8, NULL, 'PostgreSQL has better support for complex queries and JSON data.', 'active'),
(17, 9, NULL, 'Webpack 5 has much better defaults. You might not need much configuration.', 'active'),
(18, 10, NULL, 'NestJS provides structure and is great for large teams. Express is more flexible.', 'active'),
(19, 11, NULL, 'Optimize images, minify code, use lazy loading, and implement caching.', 'active'),
(20, 12, NULL, 'Git Flow or GitHub Flow are both good. Choose based on your release cycle.', 'active'),
(21, 13, NULL, 'Use React Testing Library instead of Enzyme. It encourages better testing practices.', 'active'),
(22, 14, NULL, 'Keep Lambda functions small and focused. Use layers for shared dependencies.', 'active'),
(23, 15, NULL, 'Python''s async/await is similar to JavaScript but with different event loops.', 'active'),
(24, 16, NULL, 'Use ORM for simple queries. Raw SQL for complex queries with performance needs.', 'active'),
(25, 17, NULL, 'Blue-green deployment and rolling updates are most common strategies.', 'active'),
(26, 18, NULL, 'Use React.memo, useMemo, and useCallback. Avoid unnecessary re-renders.', 'active'),
(27, 19, NULL, 'SASS has better community and more features. LESS is simpler.', 'active'),
(28, 20, NULL, 'Start with scikit-learn and basic algorithms. Practice on Kaggle datasets.', 'active'),
(29, 21, NULL, 'Use Socket.io for easier WebSocket implementation with fallbacks.', 'active'),
(30, 22, NULL, 'React is more popular and has more jobs. Learn React first.', 'active'),
(31, 23, NULL, 'Use parameterized queries and ORM. Never concatenate user input into SQL.', 'active'),
(32, 24, NULL, 'Start with GitHub Actions or GitLab CI. They''re free and easy to set up.', 'active'),
(33, 25, NULL, 'Generics let you write reusable code that works with any type while maintaining type safety.', 'active'),
(34, 2, NULL, 'Server Components reduce JavaScript bundle size by rendering on the server.', 'active'),
(15, 3, NULL, 'Another tip: use EXPLAIN to analyze query performance.', 'active'),
(20, 4, NULL, 'Also consider using a CDN for static assets.', 'active'),
(26, 5, NULL, 'Don''t forget to use the React DevTools Profiler!', 'active'),
(41, 6, NULL, 'Use heapdump and node --inspect to analyze memory usage. Chrome DevTools are great for this.', 'active'),
(41, 11, NULL, 'Also check for event listener leaks and unclosed database connections.', 'active'),
(42, 7, NULL, 'Think of it as: Call Stack -> Microtask Queue -> Macrotask Queue. Promises go to microtask queue.', 'active'),
(42, 13, NULL, 'Great visualization at javascript.info explaining this!', 'active'),
(43, 8, NULL, 'ESLint, Prettier, GitLens, and Live Server are essential!', 'active'),
(43, 14, NULL, 'Don''t forget Error Lens and Auto Rename Tag!', 'active'),
(43, 19, 66, 'Thunder Client is amazing for API testing instead of Postman.', 'active'),
(44, 9, NULL, 'Redux Toolkit is much simpler. Definitely worth it - less boilerplate code.', 'active'),
(44, 15, NULL, 'The createSlice API is so much cleaner than old Redux.', 'active'),
(45, 10, NULL, 'Multer is the most popular choice. Works great with Express.', 'active'),
(45, 16, 69, 'Make sure to validate file types and size on the server side!', 'active'),
(46, 12, NULL, 'CSS for simple animations. JavaScript for complex interactive animations.', 'active'),
(46, 17, NULL, 'CSS is more performant as it runs on GPU. Use Web Animations API for JS.', 'active'),
(47, 11, NULL, 'PostgreSQL for structured data and complex queries. MongoDB for flexibility.', 'active'),
(47, 18, NULL, 'For social media, I would choose PostgreSQL with JSONB for best of both worlds.', 'active'),
(48, 13, NULL, 'React Query has better DevTools and more features. SWR is simpler.', 'active'),
(48, 20, NULL, 'Both are excellent. React Query for complex apps, SWR for simple ones.', 'active'),
(49, 14, NULL, 'Enable CORS in your Express server with cors middleware. Set proper origins.', 'active'),
(49, 21, 77, 'In production, never use origin: "*" - specify exact domains.', 'active'),
(50, 15, NULL, 'App Router is the future but Pages Router is stable. Migrate when you have time.', 'active'),
(50, 22, NULL, 'App Router has better data fetching patterns with Server Components.', 'active'),
(51, 16, NULL, 'Use bridge networks in docker-compose. Containers can reference each other by service name.', 'active'),
(51, 23, NULL, 'Example: postgres://db:5432 where db is your database service name.', 'active'),
(52, 17, NULL, 'VSCode is more beginner-friendly. Vim has steep learning curve but amazing efficiency.', 'active'),
(52, 24, NULL, 'Try VSCode with Vim extension for best of both worlds!', 'active'),
(52, 2, 84, 'Neovim with LSP is the modern way to use Vim.', 'active'),
(53, 18, NULL, 'Use Passport.js with passport-google-oauth20 and passport-github2 strategies.', 'active'),
(53, 25, NULL, 'NextAuth.js makes this super easy if you''re using Next.js.', 'active'),
(54, 19, NULL, 'Use ts_vector and ts_query for full-text search. Create GIN indexes for performance.', 'active'),
(54, 3, NULL, 'Consider pg_trgm extension for fuzzy matching.', 'active'),
(55, 20, NULL, 'Use useReducer when you have complex state logic with multiple sub-values.', 'active'),
(55, 4, NULL, 'Or when next state depends on previous state in complex ways.', 'active'),
(56, 21, NULL, 'Add proxy_pass to your Nginx config pointing to localhost:3000 for Node.js.', 'active'),
(56, 5, 92, 'Don''t forget to proxy WebSocket connections with upgrade headers!', 'active'),
(57, 22, NULL, 'Microtasks (Promises) always run before macrotasks (setTimeout).', 'active'),
(57, 6, NULL, 'This is why Promise.resolve() runs before setTimeout(..., 0).', 'active'),
(58, 23, NULL, 'Create workspaces in package.json root. Each package gets its own package.json.', 'active'),
(58, 7, NULL, 'Use npm install -w workspace-name to install in specific workspace.', 'active'),
(59, 24, NULL, 'Socket.io handles reconnection, rooms, and fallbacks automatically. Use it.', 'active'),
(59, 8, 98, 'Native WebSockets only if you need minimal overhead and can handle edge cases.', 'active'),
(60, 25, NULL, 'CSS-in-JS has dynamic theming. CSS Modules have better performance.', 'active'),
(60, 9, NULL, 'Tailwind eliminates this debate - utility classes FTW!', 'active');

INSERT IGNORE INTO post_likes (post_id, user_id, type) VALUES
(1, 3, 'like'), (1, 5, 'like'), (1, 7, 'like'), (1, 9, 'like'),
(2, 2, 'like'), (2, 6, 'like'), (2, 8, 'like'),
(3, 4, 'like'), (3, 9, 'like'), (3, 11, 'like'), (3, 13, 'like'),
(4, 5, 'like'), (4, 10, 'like'), (4, 12, 'like'),
(5, 6, 'like'), (5, 13, 'like'), (5, 14, 'like'),
(6, 7, 'like'), (6, 15, 'like'), (6, 3, 'like'),
(7, 8, 'like'), (7, 16, 'like'), (7, 17, 'like'),
(8, 9, 'like'), (8, 18, 'like'), (8, 19, 'like'),
(9, 10, 'like'), (9, 20, 'like'), (9, 2, 'like'),
(10, 11, 'like'), (10, 21, 'like'), (10, 22, 'like'),
(11, 12, 'like'), (11, 23, 'like'), (11, 24, 'like'),
(12, 13, 'like'), (12, 25, 'like'), (12, 4, 'like'),
(13, 14, 'like'), (13, 5, 'like'),
(14, 15, 'like'), (14, 6, 'like'), (14, 7, 'like'),
(15, 16, 'like'), (15, 8, 'like'), (15, 9, 'like'),
(16, 17, 'like'), (16, 10, 'like'), (16, 11, 'like'),
(17, 18, 'like'), (17, 12, 'like'),
(18, 19, 'like'), (18, 13, 'like'),
(19, 20, 'like'), (19, 14, 'like'), (19, 15, 'like'),
(20, 21, 'like'), (20, 16, 'like'), (20, 17, 'like'), (20, 18, 'like'),
(21, 22, 'like'), (21, 19, 'like'),
(22, 23, 'like'), (22, 20, 'like'), (22, 21, 'like'),
(23, 24, 'like'), (23, 22, 'like'),
(24, 25, 'like'), (24, 23, 'like'),
(25, 2, 'like'), (25, 24, 'like'),
(26, 3, 'like'), (26, 25, 'like'), (26, 4, 'like'),
(27, 5, 'like'), (27, 6, 'like'),
(28, 7, 'like'), (28, 8, 'like'), (28, 9, 'like'),
(29, 10, 'like'), (29, 11, 'like'),
(30, 12, 'like'), (30, 13, 'like'), (30, 14, 'like'),
(31, 15, 'like'), (31, 16, 'like'),
(32, 17, 'like'), (32, 18, 'like'),
(33, 19, 'like'), (33, 20, 'like'),
(34, 21, 'like'), (34, 22, 'like'),
(35, 23, 'like'), (35, 24, 'like'),
(36, 25, 'like'), (36, 2, 'like'),
(37, 3, 'like'), (37, 4, 'like'),
(38, 5, 'like'), (38, 6, 'like'),
(39, 7, 'like'), (39, 8, 'like'),
(40, 9, 'like'), (40, 10, 'like'),
(41, 11, 'like'), (41, 12, 'like'), (41, 13, 'like'),
(42, 14, 'like'), (42, 15, 'like'), (42, 16, 'like'), (42, 17, 'like'),
(43, 18, 'like'), (43, 19, 'like'), (43, 20, 'like'), (43, 21, 'like'), (43, 22, 'like'),
(44, 23, 'like'), (44, 24, 'like'), (44, 25, 'like'),
(45, 2, 'like'), (45, 3, 'like'), (45, 4, 'like'),
(46, 5, 'like'), (46, 6, 'like'), (46, 7, 'like'),
(47, 8, 'like'), (47, 9, 'like'), (47, 10, 'like'), (47, 11, 'like'),
(48, 12, 'like'), (48, 13, 'like'), (48, 14, 'like'), (48, 15, 'like'),
(49, 16, 'like'), (49, 17, 'like'), (49, 18, 'like'),
(50, 19, 'like'), (50, 20, 'like'), (50, 21, 'like'), (50, 22, 'like'),
(51, 23, 'like'), (51, 24, 'like'), (51, 25, 'like'),
(52, 2, 'like'), (52, 3, 'like'), (52, 4, 'like'), (52, 5, 'like'), (52, 6, 'like'),
(53, 7, 'like'), (53, 8, 'like'), (53, 9, 'like'), (53, 10, 'like'),
(54, 11, 'like'), (54, 12, 'like'), (54, 13, 'like'),
(55, 14, 'like'), (55, 15, 'like'), (55, 16, 'like'), (55, 17, 'like'),
(56, 18, 'like'), (56, 19, 'like'), (56, 20, 'like'),
(57, 21, 'like'), (57, 22, 'like'), (57, 23, 'like'), (57, 24, 'like'),
(58, 25, 'like'), (58, 2, 'like'), (58, 3, 'like'),
(59, 4, 'like'), (59, 5, 'like'), (59, 6, 'like'), (59, 7, 'like'),
(60, 8, 'like'), (60, 9, 'like'), (60, 10, 'like'), (60, 11, 'like'),
(1, 11, 'dislike'), (1, 12, 'dislike'),
(5, 15, 'dislike'),
(10, 23, 'dislike'),
(42, 18, 'dislike'),
(47, 12, 'dislike'),
(52, 7, 'dislike'), (52, 8, 'dislike');

INSERT IGNORE INTO comment_likes (comment_id, user_id, type) VALUES
(1, 2, 'like'), (1, 4, 'like'), (1, 6, 'like'),
(2, 3, 'like'), (2, 7, 'like'),
(3, 2, 'like'),
(4, 3, 'like'), (4, 5, 'like'),
(5, 4, 'like'), (5, 8, 'like'),
(6, 2, 'like'), (6, 9, 'like'),
(7, 3, 'like'),
(8, 4, 'like'), (8, 10, 'like'),
(9, 5, 'like'), (9, 11, 'like'),
(10, 6, 'like'), (10, 12, 'like'),
(13, 7, 'like'), (13, 13, 'like'),
(15, 8, 'like'), (15, 14, 'like'),
(17, 9, 'like'), (17, 15, 'like'),
(19, 10, 'like'), (19, 16, 'like'),
(21, 11, 'like'), (21, 17, 'like'),
(23, 12, 'like'), (23, 18, 'like'),
(25, 13, 'like'), (25, 19, 'like'),
(27, 14, 'like'), (27, 20, 'like'),
(30, 15, 'like'), (30, 21, 'like'),
(32, 16, 'like'), (32, 22, 'like'),
(60, 6, 'like'), (60, 11, 'like'), (60, 14, 'like'),
(61, 7, 'like'), (61, 13, 'like'),
(62, 8, 'like'), (62, 15, 'like'), (62, 19, 'like'),
(63, 9, 'like'), (63, 16, 'like'),
(64, 10, 'like'), (64, 17, 'like'),
(65, 11, 'like'), (65, 18, 'like'),
(66, 12, 'like'), (66, 20, 'like'), (66, 23, 'like'),
(67, 13, 'like'), (67, 21, 'like'),
(68, 14, 'like'), (68, 22, 'like'),
(69, 15, 'like'), (69, 24, 'like'),
(70, 16, 'like'), (70, 25, 'like'),
(71, 17, 'like'), (71, 2, 'like'),
(72, 18, 'like'), (72, 3, 'like'),
(73, 19, 'like'), (73, 4, 'like'),
(74, 20, 'like'), (74, 5, 'like'), (74, 10, 'like'),
(75, 21, 'like'), (75, 6, 'like'),
(76, 22, 'like'), (76, 7, 'like'),
(77, 23, 'like'), (77, 8, 'like'), (77, 12, 'like'),
(78, 24, 'like'), (78, 9, 'like'),
(79, 25, 'like'), (79, 11, 'like'),
(80, 2, 'like'), (80, 13, 'like'),
(81, 3, 'like'), (81, 14, 'like'),
(82, 4, 'like'), (82, 15, 'like'),
(83, 5, 'like'), (83, 16, 'like'),
(84, 6, 'like'), (84, 17, 'like'), (84, 20, 'like'),
(85, 7, 'like'), (85, 18, 'like'),
(86, 8, 'like'), (86, 19, 'like'),
(87, 9, 'like'), (87, 21, 'like'),
(88, 10, 'like'), (88, 22, 'like'),
(89, 11, 'like'), (89, 23, 'like'),
(90, 12, 'like'), (90, 24, 'like'),
(91, 13, 'like'), (91, 25, 'like'),
(92, 14, 'like'), (92, 2, 'like'),
(93, 15, 'like'), (93, 3, 'like'),
(94, 16, 'like'), (94, 4, 'like'),
(95, 17, 'like'), (95, 5, 'like'),
(96, 18, 'like'), (96, 6, 'like'),
(97, 19, 'like'), (97, 7, 'like'),
(98, 20, 'like'), (98, 8, 'like'),
(99, 21, 'like'), (99, 9, 'like'),
(100, 22, 'like'), (100, 10, 'like'),
(62, 12, 'dislike'),
(70, 14, 'dislike'),
(84, 18, 'dislike');

INSERT IGNORE INTO favorites (user_id, post_id) VALUES
(2, 1), (2, 3), (2, 10), (2, 15),
(3, 2), (3, 5), (3, 12), (3, 20),
(4, 3), (4, 7), (4, 14), (4, 22),
(5, 4), (5, 9), (5, 16), (5, 25),
(6, 5), (6, 11), (6, 18), (6, 28),
(7, 6), (7, 13), (7, 19), (7, 30),
(8, 7), (8, 15), (8, 21), (8, 32),
(9, 8), (9, 17), (9, 23), (9, 35),
(10, 9), (10, 20), (10, 26), (10, 38),
(11, 10), (11, 22), (11, 29), (11, 40),
(12, 11), (12, 24), (12, 31), (12, 43),
(13, 14), (13, 27), (13, 34), (13, 46),
(14, 16), (14, 28), (14, 37), (14, 49),
(15, 19), (15, 30), (15, 39), (15, 52),
(16, 21), (16, 33), (16, 41), (16, 55),
(17, 23), (17, 35), (17, 44), (17, 58),
(18, 25), (18, 36), (18, 47), (18, 60);

INSERT IGNORE INTO subscriptions (user_id, post_id) VALUES
(2, 1), (2, 5), (2, 12),
(3, 2), (3, 7), (3, 15),
(4, 3), (4, 9), (4, 18),
(5, 4), (5, 11), (5, 21),
(6, 5), (6, 13), (6, 24),
(7, 6), (7, 15), (7, 27),
(8, 7), (8, 17), (8, 30),
(9, 8), (9, 19), (9, 33),
(10, 9), (10, 21), (10, 36),
(11, 10), (11, 23), (11, 39),
(12, 12), (12, 25), (12, 42),
(13, 14), (13, 27), (13, 45),
(14, 16), (14, 29), (14, 48),
(15, 18), (15, 31), (15, 51),
(16, 20), (16, 33), (16, 54),
(17, 22), (17, 35), (17, 57),
(18, 24), (18, 37), (18, 60);

INSERT IGNORE INTO notifications (user_id, type, message, post_id, comment_id, is_read) VALUES
(2, 'comment', 'alice_wonder commented on your post', 1, 1, FALSE),
(2, 'like', 'sarah_connor liked your post', 1, NULL, FALSE),
(2, 'comment', 'emma_watson replied to your comment', 1, 3, TRUE),
(3, 'like', 'john_smith liked your comment', NULL, 1, FALSE),
(3, 'comment', 'kate_hudson commented on your post', 2, 5, FALSE),
(4, 'like', 'alice_wonder liked your post', 3, NULL, TRUE),
(5, 'comment', 'john_smith commented on your post', 4, 13, FALSE),
(6, 'like', 'bob_builder liked your post', 5, NULL, FALSE),
(7, 'comment', 'olivia_wilde commented on your post', 6, 17, TRUE),
(8, 'like', 'leo_dicaprio liked your post', 7, NULL, FALSE),
(9, 'comment', 'natalie_port commented on your post', 8, 21, FALSE),
(10, 'like', 'brad_pitt liked your post', 9, NULL, TRUE),
(11, 'comment', 'scarlett_jo commented on your post', 10, 25, FALSE),
(12, 'like', 'matt_damon liked your post', 11, NULL, FALSE),
(13, 'comment', 'david_garcia commented on your post', 13, 61, FALSE),
(14, 'like', 'lisa_simpson liked your post', 14, NULL, FALSE),
(15, 'comment', 'tom_hardy commented on your post', 15, 64, TRUE),
(16, 'like', 'nina_dobrev liked your post', 16, NULL, FALSE),
(17, 'comment', 'chris_evans commented on your post', 17, 70, FALSE),
(18, 'like', 'kate_hudson liked your post', 18, NULL, TRUE),
(19, 'comment', 'ryan_gosling commented on your post', 19, 74, FALSE),
(20, 'like', 'jennifer_law liked your post', 20, NULL, FALSE),
(21, 'comment', 'daniel_craig commented on your post', 21, 80, TRUE),
(22, 'like', 'olivia_wilde liked your post', 22, NULL, FALSE),
(23, 'comment', 'leo_dicaprio commented on your post', 23, 86, FALSE),
(24, 'like', 'natalie_port liked your post', 24, NULL, FALSE),
(25, 'comment', 'brad_pitt commented on your post', 25, 92, TRUE);

UPDATE users u
SET rating = (
  SELECT COALESCE(SUM(rating_calc), 0) FROM (
    SELECT
      p.user_id,
      SUM(CASE WHEN pl.type = 'like' THEN 1 WHEN pl.type = 'dislike' THEN -1 ELSE 0 END) as rating_calc
    FROM posts p
    LEFT JOIN post_likes pl ON p.id = pl.post_id
    WHERE p.user_id = u.id
    GROUP BY p.user_id

    UNION ALL

    SELECT
      c.user_id,
      SUM(CASE WHEN cl.type = 'like' THEN 1 WHEN cl.type = 'dislike' THEN -1 ELSE 0 END) as rating_calc
    FROM comments c
    LEFT JOIN comment_likes cl ON c.id = cl.comment_id
    WHERE c.user_id = u.id
    GROUP BY c.user_id
  ) AS combined_ratings
);
